itai.david
yehonathanc


############ Part 1 - Differences Between UMLs (Before and After coding) ############
ScreenRenderManager class:
    Creating the ScreenRenderManager class, first we thought to hold all the game object in the PepseManager
    for handling the infinity world feature, it will handle all the logic behind adding and removing objects
    from the engine (adding and removing for make the game run more smoothly.
    Then we understand that the logic behind handling all the objects (removing and adding etc.)
    is more complex than we thought.
    so we create the ScreenRenderManager to handle it and all the non-constant gameObjects will
    be added to the game engine from that class. So the PepseManager will not hold a gameObjectCollection
    in composition anymore (as we can see in the UML).

Trees:
   First we thought that the Tree class will use only the Block class to create all the objects needed for
   creating a tree and add it to the game.
   Than we understand that the logic behind creating a tree is more complex
   (especially the leaves functionally), so we decide to separate it to different class to maintain
   the program modularity, so we create 2 generator class (the leaf and the stem) that responsible
   for creating all the blocks and their functionality for a single tree (as we can see in the UML).

NoiseGenerator – terrain
    First we thought that the terrain class we only use the noiseGenerator services and will not hold an
    instance of it as a field (composition), than we understand that we need to use it for all the
    terrain block instances that should create using a constant
    seed that we use to create the noiseGenerator instance.
    And to support the groundHeightAtX function so we have to hold an instance of the NoiseGenerator class.

Generally –
    First we thought that we need to hold a gameobjectCollection instance in every game elements class
    that we want to add to the game (sky, avatar, terrain.. etc.).
    Than we understand that for the constant-elements (night, sky, sun, sunHalo) that we create
    only once at the start of the game, we don’t have to hold an gameobjectCollection instance,
    and for the non-constant element the ScreenRenderManager will hold an gameobjectCollection
    instance and add them to the game.


############ Part 2 - Making The World Infinite ############

We have understand that there is a tension between 2 attitudes:
    1. holding the minimum number of gameObjects parallelly to sustain an infinity world
    2. make the minimum number of changes (adding and removing gameObjects to the
       game-cost us also engine sources)

After a lot of checks we found the coordinates range that we believe is the best balance
between the 2 attitudes above.
We decide to hold 3 “screens”, left screen, middle screen and right screen.
Each screen is in the size of the windowDimensions of the game, and we add all their gameObjects
to the game and hold them parallelly (all the different screen coordinates are strange to each other).
We created the ScreenRenderManager for handling it, and it works in the following way:
It holds a linked list of 3 Arrays, each array representing a screen as described above.
Every Array is holding all the gameObjects and their layers that
exists in the coordinates the defined the suitable screen.


At the start of the game we initialized all the 3 screen and their gameObjects,
Then in every call for the update function in the PepseManager we check if the Avatar bypass
The middle screen, we will  to reserve that the Avatar will always be in the middle screen,
so we delete the irrelevant screen and create a new screen in the opposite direction.
For example, we initialized screens 1-2-3, so the avatar starts at screen 2 (the middle),
if the avatar bypass to screen number 3,
we will remove screen 1 (and all its gameObjects) and add screen 4 (and all its gameObjects).
So now we hold screens 2-3-4 and the Avatar is in screen 3 (the middle),
in addition we update the “nodes” in the linked list to be in the right order (as described in the example).

With this solution we don’t need to run over all the gameObjects that is in the game and
checks for the coordinates and delete the irrelevant ones.
In addition we sustain a modular program and separate the functionality of handling
the infinity world objects (adding and removing) from the PepseManager.


############ Part 3 - Implementing Tree Package ############
In general:
The package tree consists of the class Tree in which PepseGameManager uses to create trees,
and this class uses two separate classes to do so - LeavesProducer and StemProducer, that create
the objects for a single tree. StemProducer creates Block objects and LeavesProducer creates Leaf objects -
another class that we have created in order to handle the specific functionality of a leaf.

Class Tree:
This class represents all the trees in the game. The instance of PepseGameManager holds a field of Tree
object, and uses it's simple API that consists only it's constructor and createTreeInRange method,
which creates all the relevant objects in the given range. When this method is called, the Tree instance
chooses randomly the location of the trees to create (with predefined density level) and in order to create
a single tree, it uses two classes - LeavesProducer and StemProducer (Tree holds instances of these classes
as fields).

Class StemProducer:
This class creates stem of a tree, given it's location, size, and base y coordinate. therefore it's API is
a method of createStem that implements this required functionality.
StemProducer consists of ScreenRendererManager object which it gets from Tree when it calls it's constructor.
That way StemProducer enables the ScreenRendererManager object to save the created objects and delete them
when needed, to support the "infinite world" as described above.

Class LeavesProducer and Class Leaf:
The relation between LeavesProducer to Tree, is similar to this of StemProducer.
However the logic of the leaves creation is different from stem blocks.
There are actions and attributes that needed to be set in the initialization of the leaves, such as their
 lifetime, fade time, etc. These attributes are determined by LeavesProducer when creating the leaves.
 On the other hand, there are operations that the created leaf needs to supply, like resetting it's initial
  location (needs to save a field for that) and updating it's location when falling.
  Therefore we have implemented another class - Leaf, that is in charge of these operations. This class
   extends Block, as it is a first a block in the game, and have additional functionality, and needs to
override the update function.


############ Part 4 - Dilemmas and Design ############
### Dilemma - Implementing Avatar states: ###

Background:
Avatar haד different states: flying, falling, walking and standing.
In each state there are different operations that affect the Avatar's attributes differently (energy,
location, velocity, renderer, etc). We have considered different design patterns:
	- Considering Strategy Design Pattern:
	  This option was denied since the object changes it's state frequently and therefore this design pattern
	  is not suitable to our case in it's essence.
	- Considering State Design Pattern:
	  We have considered keeping the different states of the Avatar as different classes that inherits from
	  an abstract class of a state (of implementing a state interface). However, we have realised that the
	  differences between different states are not enough to justify the creation of different classes and
	  it will make our code less flexible.
	- Considering Decorator Design Pattern:
	  We have chosen not to use Decorator, as the Avatar has one state at a time, and we don't need to utilize
	  the Decorator's ability to activate different operations of different objects in a single call,
	  which is it's essence.

Our Implementation:
We have realized that the states are unique to the Avatar, and we want the state to access the fields of the
Avatar it belongs to. With that in mind we decided to implement an inner class for the avatar states -
"AvatarState". The Avatar holds instances of this nested class which defines the different states of the
avatar. The Avatar also holds a field for the currents state - that keeps the reference for the
appropriate state. When needed the Avatar changes it's state (for example when flying and run out of energy),
 and when that happens, it uses the method setState to set the new state, the new renderable
 and it's dimensions. The states are differ by the function that is called when the update function is called.
  We defined these operations for the different states in separate functions in Avatar class, and these
  methods are sent as method references to the states. Next, we override the update function by calling the
   state's update function (which operates the function that it got as a method reference).

### Dilemma - Tree Package Structure ###
We have considered the option that Tree will use only the class Block in order to create objects for the
leaves and the stems. On one hand, passing the responsibilities to new classes can result in too complex
classes dependencies and structure. On the other hand, keeping the management and the logic of the creation
 of leaves inside Tree, will load Tree with too complex functionalities that logically can be split.
We have chosen to split the classes as described above, to make the code more readable and modular.


############ Part 5 - Bonus ############

# Sun Change of Color:
We decided to create a sun that changes it's colors and simulate real looking sunrise and sunset.
When the sun gets close to the ground, it becomes gradually red, in the bottom it is totally red,
and when moving to the top, it becomes gradually yellow. For that, we used a transition that changes the
 sun's renderable according to it's angle.

# Avatar Sound:
We decided to add another element for the Avatar - Sound.
When pressing 'p' (for play) the Avatar selects a random sound which characterises it.
